commit 8f5238538d47e958cad2490732fbb27e7b1cd8ab
Author: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date:   Wed Sep 27 23:46:51 2017 +0200

    hurd: Fix dirfd symbol exposition from ftw
    
    dirfd is XOPEN2K8 only, it should not be exposed along ftw which is earlier.
    
            * include/dirent.h (__dirfd): New declaration.
            * dirent/dirfd.c (dirfd): Rename to __dirfd, and redefine as weak
            alias.
            * sysdeps/posix/dirfd/dirfd.c (dirfd): Likewise.
            * sysdeps/mach/hurd/dirfd.c (dirfd): Likewise.
            * io/ftw.c (open_dir_stream, ftw_dir): Use __dirfd instead of dirfd.

+ glob in glibc 2.26, removed later

Index: glibc-2.26/dirent/dirfd.c
===================================================================
--- glibc-2.26.orig/dirent/dirfd.c
+++ glibc-2.26/dirent/dirfd.c
@@ -21,10 +21,11 @@
 #include <errno.h>
 
 int
-dirfd (DIR *dirp)
+__dirfd (DIR *dirp)
 {
   __set_errno (ENOSYS);
   return -1;
 }
 
+weak_alias (__dirfd, dirfd)
 stub_warning (dirfd)
Index: glibc-2.26/include/dirent.h
===================================================================
--- glibc-2.26.orig/include/dirent.h
+++ glibc-2.26/include/dirent.h
@@ -48,6 +48,7 @@ extern DIR *__alloc_dir (int fd, bool cl
 			 const struct stat64 *statp)
      internal_function attribute_hidden;
 extern __typeof (rewinddir) __rewinddir;
+extern __typeof (dirfd) __dirfd;
 
 extern void __scandir_cancel_handler (void *arg) attribute_hidden;
 extern int __scandir_tail (DIR *dp,
Index: glibc-2.26/io/ftw.c
===================================================================
--- glibc-2.26.orig/io/ftw.c
+++ glibc-2.26/io/ftw.c
@@ -363,7 +363,7 @@ open_dir_stream (int *dfdp, struct ftw_d
 	result = -1;
       else
 	{
-	  dirp->streamfd = dirfd (dirp->stream);
+	  dirp->streamfd = __dirfd (dirp->stream);
 	  dirp->content = NULL;
 	  data->dirstreams[data->actdir] = dirp;
 
@@ -522,7 +522,7 @@ fail:
   /* If necessary, change to this directory.  */
   if (data->flags & FTW_CHDIR)
     {
-      if (__fchdir (dirfd (dir.stream)) < 0)
+      if (__fchdir (__dirfd (dir.stream)) < 0)
 	{
 	  result = -1;
 	  goto fail;
@@ -606,7 +606,7 @@ fail:
       /* Change back to the parent directory.  */
       int done = 0;
       if (old_dir->stream != NULL)
-	if (__fchdir (dirfd (old_dir->stream)) == 0)
+	if (__fchdir (__dirfd (old_dir->stream)) == 0)
 	  done = 1;
 
       if (!done)
Index: glibc-2.26/sysdeps/mach/hurd/dirfd.c
===================================================================
--- glibc-2.26.orig/sysdeps/mach/hurd/dirfd.c
+++ glibc-2.26/sysdeps/mach/hurd/dirfd.c
@@ -22,7 +22,7 @@
 #include <errno.h>
 
 int
-dirfd (DIR *dirp)
+__dirfd (DIR *dirp)
 {
   int fd;
 
@@ -41,3 +41,5 @@ dirfd (DIR *dirp)
 
   return fd;
 }
+
+weak_alias (__dirfd, dirfd)
Index: glibc-2.26/sysdeps/posix/dirfd.c
===================================================================
--- glibc-2.26.orig/sysdeps/posix/dirfd.c
+++ glibc-2.26/sysdeps/posix/dirfd.c
@@ -22,7 +22,9 @@
 #undef dirfd
 
 int
-dirfd (DIR *dirp)
+__dirfd (DIR *dirp)
 {
   return dirp->fd;
 }
+
+weak_alias (__dirfd, dirfd)
Index: glibc-2.26/posix/glob.c
===================================================================
--- glibc-2.26.orig/posix/glob.c
+++ glibc-2.26/posix/glob.c
@@ -1520,7 +1520,7 @@ glob_in_dir (const char *pattern, const
       else
 	{
 	  int dfd = (__builtin_expect (flags & GLOB_ALTDIRFUNC, 0)
-		     ? -1 : dirfd ((DIR *) stream));
+		     ? -1 : __dirfd ((DIR *) stream));
 	  int fnm_flags = ((!(flags & GLOB_PERIOD) ? FNM_PERIOD : 0)
 			   | ((flags & GLOB_NOESCAPE) ? FNM_NOESCAPE : 0));
 	  flags |= GLOB_MAGCHAR;
