hidden jump can not work in these snippets in the NO_HIDDEN case, because %ebx
is not set as PIC register, and thus one can't use the @plt version.

Until we avoid using NO_HIDDEN (see
https://sourceware.org/bugzilla/show_bug.cgi?id=15605#c5), we need this.

diff --git a/sysdeps/i386/fpu/e_expl.S b/sysdeps/i386/fpu/e_expl.S
index 7d75fe22a1..8c06f5c3ee 100644
--- a/sysdeps/i386/fpu/e_expl.S
+++ b/sysdeps/i386/fpu/e_expl.S
@@ -81,7 +81,13 @@ ENTRY(IEEE754_EXPL)
 	movzwl	4+8(%esp), %eax
 	xorb	$0x80, %ah	// invert sign bit (now 1 is "positive")
 	cmpl	$0xc006, %eax	// is num positive and exp >= 6 (number is >= 128.0)?
+	#if !defined(PIC) || !defined(NO_HIDDEN)
 	jae	HIDDEN_JUMPTARGET (__expl) // (if num is denormal, it is at least >= 64.0)
+	#else
+	jb	0f
+	jmp	__expl // (if num is denormal, it is at least >= 64.0)
+0:
+	#endif
 #endif
 	fldt	4(%esp)
 /* I added the following ugly construct because expl(+-Inf) resulted
diff --git a/sysdeps/i386/fpu/e_powl.S b/sysdeps/i386/fpu/e_powl.S
index 9e162848e4..04f07dcc5e 100644
--- a/sysdeps/i386/fpu/e_powl.S
+++ b/sysdeps/i386/fpu/e_powl.S
@@ -242,7 +242,11 @@ ENTRY(__ieee754_powl)
 	cfi_adjust_cfa_offset (28)
 	fstpt	12(%esp)	// x
 	fstpt	(%esp)		// <empty>
+	#if !defined(PIC) || !defined(NO_HIDDEN)
 	call	HIDDEN_JUMPTARGET (__powl_helper)	// <result>
+	#else
+	call	__powl_helper	// <result>
+	#endif
 	addl	$36, %esp
 	cfi_adjust_cfa_offset (-36)
 	ret
diff --git a/sysdeps/i386/fpu/s_expm1.S b/sysdeps/i386/fpu/s_expm1.S
index 59fded2d5a..60096d23ae 100644
--- a/sysdeps/i386/fpu/s_expm1.S
+++ b/sysdeps/i386/fpu/s_expm1.S
@@ -51,7 +51,13 @@ ENTRY(__expm1)
 	movzwl	4+6(%esp), %eax
 	xorb	$0x80, %ah	// invert sign bit (now 1 is "positive")
 	cmpl	$0xc086, %eax	// is num >= 704?
+	#if !defined(PIC) || !defined(NO_HIDDEN)
 	jae	HIDDEN_JUMPTARGET (__exp)
+	#else
+	jb	0f
+	jmp	__exp
+0:
+	#endif
 
 	fldl	4(%esp)		// x
 	fxam			// Is NaN, +-Inf or +-0?
diff --git a/sysdeps/i386/fpu/s_expm1f.S b/sysdeps/i386/fpu/s_expm1f.S
index 4f0b2e7832..51d5aa8c4f 100644
--- a/sysdeps/i386/fpu/s_expm1f.S
+++ b/sysdeps/i386/fpu/s_expm1f.S
@@ -51,7 +51,13 @@ ENTRY(__expm1f)
 	movzwl	4+2(%esp), %eax
 	xorb	$0x80, %ah	// invert sign bit (now 1 is "positive")
 	cmpl	$0xc2b1, %eax	// is num >= 88.5?
+	#if !defined(PIC) || !defined(NO_HIDDEN)
 	jae	HIDDEN_JUMPTARGET (__expf)
+	#else
+	jb	0f
+	jmp	__expf
+0:
+	#endif
 
 	flds	4(%esp)		// x
 	fxam			// Is NaN, +-Inf or +-0?
