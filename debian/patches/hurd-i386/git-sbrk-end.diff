Committed from glibc 2.33

From: Samuel Thibault <samuel.thibault@ens-lyon.org>

hurd: Rework sbrk

Making the brk start exactly at the end of the main application binary was
requiring to get it through the _end symbol, which does not work any more
with recent toolchains, and actually produces in libc.so a confusing
external _end symbol that produces odd results, see
https://sourceware.org/bugzilla/show_bug.cgi?id=23499

Trying to do so is quite outdated anyway with the tendency for address
randomization.

Using _end was also allowing to include the main binary data within
the RLIMIT_DATA, but this also seems outdated with dynamic library
loading, and nowadays' memory consumption via malloc and mmap rather than
statically-allocated data.

This adds a BRK_START macro in <vm_param.h> that just tells where we
want to start the brk, and thus removes the _end symbol.

* sysdeps/mach/hurd/i386/vm_param.h: New file.
* sysdeps/mach/hurd/brk.c: Use BRK_START as brk start instead of _end.
Also ignore __data_start.
* hurd/Versions: Remove _end symbol.
* sysdeps/mach/hurd/i386/libc.abilist: Remove _end symbol.


---
 hurd/Versions                       |  3 ---
 misc/Makefile                       |  4 +++
 misc/tst-sbrk-pie.c                 |  3 +++
 misc/tst-sbrk-static.c              |  3 +++
 misc/tst-sbrk.c                     | 49 +++++++++++++++++++++++++++++++++++++
 sysdeps/mach/hurd/brk.c             | 16 ++++++------
 sysdeps/mach/hurd/i386/libc.abilist |  1 -
 sysdeps/mach/hurd/i386/vm_param.h   | 24 ++++++++++++++++++
 8 files changed, 91 insertions(+), 12 deletions(-)

diff --git a/hurd/Versions b/hurd/Versions
index af6a0e45de..b68ad384a5 100644
--- a/hurd/Versions
+++ b/hurd/Versions
@@ -1,8 +1,5 @@
 libc {
   GLIBC_2.0 {
-    # necessary for the Hurd brk implementation
-    _end;
-
     # variables used in macros & inline functions
     __hurd_threadvar_stack_mask; __hurd_threadvar_stack_offset;
 
diff --git a/misc/Makefile b/misc/Makefile
index b7be2bc19a..1294a21302 100644
--- a/misc/Makefile
+++ b/misc/Makefile
@@ -129,6 +129,10 @@ CFLAGS-sbrk.op = $(no-stack-protector)
 CFLAGS-brk.o = $(no-stack-protector)
 CFLAGS-brk.op = $(no-stack-protector)
 
+tests += tst-sbrk tst-sbrk-pie tst-sbrk-static
+tests-pie += tst-sbrk-pie
+tests-static += tst-sbrk-static
+
 include ../Rules
 
 $(objpfx)libg.a: $(dep-dummy-lib); $(make-dummy-lib)
diff --git a/misc/tst-sbrk-pie.c b/misc/tst-sbrk-pie.c
new file mode 100644
index 0000000000..3896b9699e
--- /dev/null
+++ b/misc/tst-sbrk-pie.c
@@ -0,0 +1,3 @@
+/* Test sbrk with -pie.  */
+
+#include <tst-sbrk.c>
diff --git a/misc/tst-sbrk-static.c b/misc/tst-sbrk-static.c
new file mode 100644
index 0000000000..fef52718cd
--- /dev/null
+++ b/misc/tst-sbrk-static.c
@@ -0,0 +1,3 @@
+/* Test sbrk with -static.  */
+
+#include <tst-sbrk.c>
diff --git a/misc/tst-sbrk.c b/misc/tst-sbrk.c
new file mode 100644
index 0000000000..8db48ca2e9
--- /dev/null
+++ b/misc/tst-sbrk.c
@@ -0,0 +1,49 @@
+/* Test sbrk.
+
+   Copyright (C) 2013-2015 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <http://www.gnu.org/licenses/>.  */
+
+#include <errno.h>
+#include <stdio.h>
+#include <unistd.h>
+
+static int
+do_test (void)
+{
+  /* Try to advance the program break by 1 MiB.  */
+  void *one_mib = sbrk (1 * 1024 * 1024);
+  if (one_mib == (void *) -1)
+    {
+      if (errno != ENOMEM)
+        printf ("sbrk (1 MiB) failed, and with wrong errno: %m\n");
+      else
+        printf ("sbrk (1 MiB) failed\n");
+
+      return 1;
+    }
+  else
+    printf ("sbrk at %p\n", one_mib);
+
+  return 0;
+}
+
+/* TODO: fix rlimit bug.  64 MiB (test-skeleton.c's default) should be
+   enough.  */
+#define TEST_DATA_LIMIT RLIM_INFINITY
+
+#define TEST_FUNCTION do_test ()
+#include "../test-skeleton.c"
diff --git a/sysdeps/mach/hurd/brk.c b/sysdeps/mach/hurd/brk.c
index f8272e5f22..90798e2c7a 100644
--- a/sysdeps/mach/hurd/brk.c
+++ b/sysdeps/mach/hurd/brk.c
@@ -19,6 +19,7 @@
 #include <hurd.h>
 #include <hurd/resource.h>
 #include <cthreads.h>		/* For `struct mutex'.  */
+#include <vm_param.h>
 
 
 /* Initial maximum size of the data segment (this is arbitrary).  */
@@ -39,9 +40,7 @@ weak_alias (_hurd_brk, ___brk_addr)
 
 struct mutex _hurd_brk_lock;
 
-extern int __data_start, _end;
-weak_extern (__data_start)
-static vm_address_t static_data_start;
+static vm_address_t brk_start;
 
 
 /* Set the end of the process's data space to INADDR.
@@ -91,7 +90,7 @@ _hurd_set_brk (vm_address_t addr)
   rlimit = _hurd_rlimits[RLIMIT_DATA].rlim_cur;
   __mutex_unlock (&_hurd_rlimit_lock);
 
-  if (addr - static_data_start > rlimit)
+  if (addr - brk_start > rlimit)
     {
       /* Need to increase the resource limit.  */
       errno = ENOMEM;
@@ -138,17 +137,18 @@ init_brk (void)
 
   __mutex_init (&_hurd_brk_lock);
 
-  static_data_start = (vm_address_t) (&__data_start ?: &_end);
+  brk_start = (vm_address_t) BRK_START;
 
   /* If _hurd_brk is already set, don't change it.  The assumption is that
      it was set in a previous run before something like Emacs's unexec was
      called and dumped all the data up to the break at that point.  */
-  if (_hurd_brk == 0)
-    _hurd_brk = (vm_address_t) &_end;
+  if (_hurd_brk == 0) {
+    _hurd_brk = (vm_address_t) BRK_START;
+  }
 
   pagend = round_page (_hurd_brk);
 
-  _hurd_data_end = round_page (static_data_start + DATA_SIZE);
+  _hurd_data_end = round_page (brk_start + DATA_SIZE);
 
   if (pagend < _hurd_data_end)
     {
diff --git a/sysdeps/mach/hurd/i386/libc.abilist b/sysdeps/mach/hurd/i386/libc.abilist
index e3fc05137b..297afc6a48 100644
--- a/sysdeps/mach/hurd/i386/libc.abilist
+++ b/sysdeps/mach/hurd/i386/libc.abilist
@@ -554,7 +554,6 @@ GLIBC_2.2.6 __xstat64 F
 GLIBC_2.2.6 _authenticate F
 GLIBC_2.2.6 _dl_mcount_wrapper F
 GLIBC_2.2.6 _dl_mcount_wrapper_check F
-GLIBC_2.2.6 _end GLIBC_2.2.6 g ? D .bss 00000000
 GLIBC_2.2.6 _environ D 0x4
 GLIBC_2.2.6 _exit F
 GLIBC_2.2.6 _flushlbf F
diff --git a/sysdeps/mach/hurd/i386/vm_param.h b/sysdeps/mach/hurd/i386/vm_param.h
new file mode 100644
index 0000000000..96230bc149
--- /dev/null
+++ b/sysdeps/mach/hurd/i386/vm_param.h
@@ -0,0 +1,24 @@
+/* Copyright (C) 2020 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#ifndef _I386_VM_PARAM_H
+#define _I386_VM_PARAM_H
+
+/* Arbitrary start of the brk. This is after usual binary and library mappings.  */
+#define BRK_START	0x10000000
+
+#endif /* i386/vm_param.h */
-- 
tg: (963c37d5c0..) t/pie-sbrk (depends on: baseline)
